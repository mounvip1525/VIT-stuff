import pandas as pd
import torch
from sentence_transformers import SentenceTransformer, util
from transformers import DistilBertTokenizer, DistilBertModel

# Load the dataset
df = pd.read_excel("your_dataset.xlsx")

# Define columns to preprocess
columns_to_preprocess = ["vendor name", "product name", "category", "sub category", "product description", "BPPA Domain", "BPPA Sub domain", "BPPA Sub Sub domain", "Strategic outlook"]

# Combine information from selected columns into a single string
df["combined_info"] = df[columns_to_preprocess].apply(lambda x: ' '.join(x.astype(str)), axis=1)

# Define weights for each column
weight_dict = {
    "vendor name": 0.1,
    "product name": 0.1,
    "category": 0.2,
    "sub category": 0.1,
    "product description": 0.3,
    "BPPA Domain": 0.1,
    "BPPA Sub domain": 0.05,
    "BPPA Sub Sub domain": 0.05,
    "Strategic outlook": 0.05
}

# Define stopwords
stopwords = {"the", "a", "an", "we", "should", "them"}

# Initialize DistilBERT tokenizer and model
tokenizer = DistilBertTokenizer.from_pretrained("distilbert-base-uncased")
model = DistilBertModel.from_pretrained("distilbert-base-uncased")

# Preprocess text
def preprocess_text(text, weights):
    text = text.lower()
    sentences = text.split(".")
    preprocessed_sentences = []
    for sentence in sentences:
        tokens = sentence.split()
        weighted_words = [word for word in tokens if word.lower() not in stopwords]
        weighted_sentence = ' '.join(weighted_words)
        preprocessed_sentences.append(weighted_sentence)
    return preprocessed_sentences

# Apply preprocessing
df["processed_info"] = df["combined_info"].apply(lambda x: preprocess_text(x, weight_dict))

# Encode text using DistilBERT
def encode_text(text, tokenizer, model):
    tokenized_text = tokenizer(text, padding=True, truncation=True, return_tensors="pt", max_length=128)
    with torch.no_grad():
        output = model(**tokenized_text)
    embeddings = output.last_hidden_state.mean(dim=1)
    return embeddings

# Apply encoding
encoded_data = []
for idx, row in df.iterrows():
    encoded_info = encode_text(row["processed_info"], tokenizer, model)
    encoded_data.append(encoded_info)

# Ensure all embeddings have the same dimensions
max_len = max([emb.shape[1] for emb in encoded_data])
for i, emb in enumerate(encoded_data):
    if emb.shape[1] < max_len:
        padding = torch.zeros(1, max_len - emb.shape[1], emb.shape[2])
        encoded_data[i] = torch.cat((emb, padding), dim=1)

# Define the search function
def search(query, encoded_data):
    query_embedding = encode_text(query, tokenizer, model)
    cosine_scores = util.pytorch_cos_sim(query_embedding, torch.stack(encoded_data)).flatten()
    return cosine_scores.argsort(descending=True)

# Example usage:
query = "customer campaign management and compliance"
results = search(query, encoded_data)
print(results)
