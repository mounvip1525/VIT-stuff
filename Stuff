import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.stem import PorterStemmer

# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

stopwords = { i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves", 
    "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their", 
    "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", 
    "was", "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", 
    "the", "and", "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", 
    "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", 
    "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", 
    "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", 
    "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"
}

# Load the dataset from Excel file (replace with your file path)
df = pd.read_excel("your_dataset.xlsx")

# Define relevant columns for preprocessing
columns_to_preprocess = ["vendor name", "product name", "category", "sub category", "product description", "BPPA Domain", "BPPA Sub domain", "BPPA Sub Sub domain", "Strategic outlook"]

# Combine information from selected columns into a single string
df["combined_info"] = df[columns_to_preprocess].apply(lambda x: ' '.join(x.astype(str)), axis=1)

# Define weights for each column
weight_dict = {
    "vendor name": 0.1,
    "product name": 0.1,
    "category": 0.2,
    "sub category": 0.1,
    "product description": 0.3,
    "BPPA Domain": 0.1,
    "BPPA Sub domain": 0.05,
    "BPPA Sub Sub domain": 0.05,
    "Strategic outlook": 0.05
}

# Initialize Porter Stemmer
porter = PorterStemmer()

def preprocess_text(text, weights):
    """
    Preprocesses text for search, handling potential sentences within descriptions.

    Args:
        text: A string containing text to be preprocessed.
        weights: A dictionary where keys are column names and values are weights.

    Returns:
        A string (or list of strings) containing the preprocessed text.
    """
    text = text.lower()  # Convert text to lowercase
    
    # Tokenize text into sentences using NLTK
    sentences = sent_tokenize(text)

    preprocessed_sentences = []
    # Process each sentence
    for sentence in sentences:
        # Tokenize sentence into words
        tokens = word_tokenize(sentence)
        # Remove stopwords and apply weights
        stop_words = set(stopwords.words('english'))
        weighted_words = [porter.stem(word) * weights.get(word, 1) for word in tokens if word.lower() not in stop_words]
        # Join weighted words into sentence
        weighted_sentence = ' '.join(weighted_words)
        preprocessed_sentences.append(weighted_sentence)

    return preprocessed_sentences

# Apply preprocessing
df["processed_info"] = df["combined_info"].apply(lambda x: preprocess_text(x, weight_dict))

# Example usage (might show single or multiple sentences)
print(df["processed_info"].head())
