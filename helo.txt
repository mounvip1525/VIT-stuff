private void handleTwoArgumentFunction(FunctionDefinition fd, String[] args, FieldDataType argumentType) {
    fd.setFunctionType("Math");
    fd.setArgumentCount(2);
    fd.getArgumentTypes().add(argumentType);
    fd.getArgumentTypes().add(argumentType);
}

private Map<String, Consumer<FunctionDefinition>> functionDefinitions = Map.of(
        "add", fd -> handleTwoArgumentFunction(fd, null, FieldDataType.INTEGER),
        "sub", fd -> handleTwoArgumentFunction(fd, null, FieldDataType.INTEGER),
        "mul", fd -> handleTwoArgumentFunction(fd, null, FieldDataType.INTEGER),
        "div", fd -> handleTwoArgumentFunction(fd, null, FieldDataType.INTEGER),
        "concat", fd -> {
            fd.setFunctionType("String");
            fd.setArgumentCount(2);
            fd.getArgumentTypes().add(FieldDataType.STRING);
            fd.getArgumentTypes().add(FieldDataType.STRING);
        }
);

public FunctionDefinition(String functionName, String[] arguments) {
    functionDefinitions.getOrDefault(functionName, fd -> {
        fd.setFunctionType("Undefined");
        fd.setArgumentCount(0);
    }).accept(this);
    
    if (arguments != null) {
        this.setArguments(arguments);
    }
}
